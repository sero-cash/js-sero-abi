// Generated by dts-bundle v0.7.3

declare module 'js-sero-utils' {
    import * as utils from 'js-sero-utils/utils';
    import { version } from 'js-sero-utils/_version';
    export { utils, version };
}

declare module 'js-sero-utils/utils' {
    import { AbiCoder, defaultAbiCoder, formatSignature, formatParamType, parseSignature, parseParamType } from 'js-sero-utils/utils/abi-coder';
    import { getAddress } from 'js-sero-utils/utils/address';
    import { BigNumber, bigNumberify } from 'js-sero-utils/utils/bignumber';
    import { arrayify, concat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexZeroPad, isHexString, joinSignature, padZeros, splitSignature, stripZeros } from 'js-sero-utils/utils/bytes';
    import { hashMessage, id, namehash } from 'js-sero-utils/utils/hash';
    import { Interface } from 'js-sero-utils/utils/interface';
    import { keccak256 } from 'js-sero-utils/utils/keccak256';
    import { sha256 } from 'js-sero-utils/utils/sha2';
    import { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from 'js-sero-utils/utils/solidity';
    import { randomBytes } from 'js-sero-utils/utils/random-bytes';
    import { checkProperties, deepCopy, defineReadOnly, resolveProperties, shallowCopy } from 'js-sero-utils/utils/properties';
    import * as RLP from 'js-sero-utils/utils/rlp';
    import { formatBytes32String, parseBytes32String, toUtf8Bytes, toUtf8String } from 'js-sero-utils/utils/utf8';
    import { commify, formatUnits, parseUnits } from 'js-sero-utils/utils/units';
    import { UnicodeNormalizationForm } from 'js-sero-utils/utils/utf8';
    import { CoerceFunc, EventFragment, FunctionFragment, ParamType } from 'js-sero-utils/utils/abi-coder';
    import { BigNumberish } from 'js-sero-utils/utils/bignumber';
    import { Arrayish, Hexable, Signature } from 'js-sero-utils/utils/bytes';
    import { Indexed, DeployDescription, EventDescription, FunctionDescription, LogDescription } from 'js-sero-utils/utils/interface';
    export { AbiCoder, defaultAbiCoder, formatSignature, formatParamType, parseSignature, parseParamType, RLP, checkProperties, deepCopy, defineReadOnly, resolveProperties, shallowCopy, arrayify, concat, padZeros, stripZeros, Interface, BigNumber, bigNumberify, hexlify, isHexString, hexStripZeros, hexZeroPad, hexDataLength, hexDataSlice, toUtf8Bytes, toUtf8String, formatBytes32String, parseBytes32String, hashMessage, namehash, id, getAddress, formatUnits, parseUnits, commify, keccak256, sha256, randomBytes, solidityPack, solidityKeccak256, soliditySha256, splitSignature, joinSignature, UnicodeNormalizationForm, CoerceFunc, EventFragment, FunctionFragment, ParamType, BigNumberish, Arrayish, Hexable, Signature, Indexed, DeployDescription, EventDescription, FunctionDescription, LogDescription, };
}

declare module 'js-sero-utils/_version' {
    export const version = "0.0.1";
}

declare module 'js-sero-utils/utils/abi-coder' {
    import { BigNumber } from 'js-sero-utils/utils/bignumber';
    import { Arrayish } from 'js-sero-utils/utils/bytes';
    export type CoerceFunc = (type: string, value: any) => any;
    export type ParamType = {
        name?: string;
        type: string;
        indexed?: boolean;
        components?: Array<any>;
    };
    export type EventFragment = {
        type: string;
        name: string;
        anonymous: boolean;
        inputs: Array<ParamType>;
    };
    export type FunctionFragment = {
        type: string;
        name: string;
        constant: boolean;
        inputs: Array<ParamType>;
        outputs: Array<ParamType>;
        payable: boolean;
        stateMutability: string;
        gas?: BigNumber;
    };
    export const defaultCoerceFunc: CoerceFunc;
    export function parseParamType(type: string): ParamType;
    export function formatParamType(paramType: ParamType): string;
    export function formatSignature(fragment: EventFragment | FunctionFragment): string;
    export function parseSignature(fragment: string): EventFragment | FunctionFragment;
    export class AbiCoder {
        readonly coerceFunc: CoerceFunc;
        constructor(coerceFunc?: CoerceFunc);
        encode(types: Array<string | ParamType>, values: Array<any>): string;
        encodePrefix(types: Array<string | ParamType>, values: Array<any>, rand: string): string;
        decode(types: Array<string | ParamType>, data: Arrayish): any;
    }
    export const defaultAbiCoder: AbiCoder;
}

declare module 'js-sero-utils/utils/address' {
    export function padLeft(string: string, chars: number, sign: string): string;
    export function isStrictAddress(address: string): boolean;
    export function getAddress(address: string): string;
    export function base58ToHex(address: string): string;
    export function jionBase58ToHex(addrs: Array<string>): string;
    export function encodeAddrLength(len: number): string;
}

declare module 'js-sero-utils/utils/bignumber' {
    import { Hexable } from 'js-sero-utils/utils/bytes';
    import { Arrayish } from 'js-sero-utils/utils/bytes';
    export type BigNumberish = BigNumber | string | number | Arrayish;
    export class BigNumber implements Hexable {
        constructor(value: BigNumberish);
        fromTwos(value: number): BigNumber;
        toTwos(value: number): BigNumber;
        abs(): BigNumber;
        add(other: BigNumberish): BigNumber;
        sub(other: BigNumberish): BigNumber;
        div(other: BigNumberish): BigNumber;
        mul(other: BigNumberish): BigNumber;
        mod(other: BigNumberish): BigNumber;
        pow(other: BigNumberish): BigNumber;
        maskn(value: number): BigNumber;
        eq(other: BigNumberish): boolean;
        lt(other: BigNumberish): boolean;
        lte(other: BigNumberish): boolean;
        gt(other: BigNumberish): boolean;
        gte(other: BigNumberish): boolean;
        isZero(): boolean;
        toNumber(): number;
        toString(): string;
        toHexString(): string;
        static isBigNumber(value: any): value is BigNumber;
    }
    export function bigNumberify(value: BigNumberish): BigNumber;
}

declare module 'js-sero-utils/utils/bytes' {
    /**
      *  Conversion Utilities
      *
      */
    export type Arrayish = string | ArrayLike<number>;
    export interface Hexable {
        toHexString(): string;
    }
    export interface Signature {
        r: string;
        s: string;
        recoveryParam?: number;
        v?: number;
    }
    export function isHexable(value: any): value is Hexable;
    export function isArrayish(value: any): value is Arrayish;
    export function arrayify(value: Arrayish | Hexable): Uint8Array;
    export function concat(objects: Array<Arrayish>): Uint8Array;
    export function stripZeros(value: Arrayish): Uint8Array;
    export function padZeros(value: Arrayish, length: number): Uint8Array;
    export function isHexString(value: any, length?: number): boolean;
    export function hexlify(value: Arrayish | Hexable | number): string;
    export function hexDataLength(data: string): number;
    export function hexDataSlice(data: string, offset: number, endOffset?: number): string;
    export function hexStripZeros(value: string): string;
    export function hexZeroPad(value: string, length: number): string;
    export function splitSignature(signature: Arrayish | Signature): Signature;
    export function joinSignature(signature: Signature): string;
}

declare module 'js-sero-utils/utils/hash' {
    import { Arrayish } from 'js-sero-utils/utils/bytes';
    export function namehash(name: string): string;
    export function id(text: string): string;
    export function hashMessage(message: Arrayish | string): string;
}

declare module 'js-sero-utils/utils/interface' {
    import { BigNumber } from 'js-sero-utils/utils/bignumber';
    import { BigNumberish } from 'js-sero-utils/utils/bignumber';
    import { EventFragment, FunctionFragment, ParamType } from 'js-sero-utils/utils/abi-coder';
    export interface Indexed {
        readonly hash: string;
    }
    export interface DeployDescription {
        readonly inputs: Array<ParamType>;
        readonly payable: boolean;
        encode(bytecode: string, params: Array<any>): string;
    }
    export interface FunctionDescription {
        readonly type: "call" | "transaction";
        readonly name: string;
        readonly signature: string;
        readonly sighash: string;
        readonly inputs: Array<ParamType>;
        readonly outputs: Array<ParamType>;
        readonly payable: boolean;
        readonly gas: BigNumber;
        encode(params: Array<any>): string;
        decode(data: string): any;
    }
    export interface EventDescription {
        readonly name: string;
        readonly signature: string;
        readonly inputs: Array<ParamType>;
        readonly anonymous: boolean;
        readonly topic: string;
        encodeTopics(params: Array<any>): Array<string>;
        decode(data: string, topics?: Array<string>): any;
    }
    export interface LogDescription {
        readonly decode: (data: string, topics: Array<string>) => any;
        readonly name: string;
        readonly signature: string;
        readonly topic: string;
        readonly values: any;
    }
    export interface TransactionDescription {
        readonly name: string;
        readonly args: Array<any>;
        readonly signature: string;
        readonly sighash: string;
        readonly decode: (data: string) => any;
        readonly value: BigNumber;
    }
    class Description {
        constructor(info: any);
    }
    class _DeployDescription extends Description implements DeployDescription {
        readonly inputs: Array<ParamType>;
        readonly payable: boolean;
        encode(bytecode: string, params: Array<any>): string;
    }
    class _FunctionDescription extends Description implements FunctionDescription {
        readonly type: "call" | "transaction";
        readonly name: string;
        readonly signature: string;
        readonly sighash: string;
        readonly inputs: Array<ParamType>;
        readonly outputs: Array<ParamType>;
        readonly payable: boolean;
        readonly gas: BigNumber;
        encode(params: Array<any>): string;
        decode(data: string): any;
    }
    class _EventDescription extends Description implements EventDescription {
        readonly name: string;
        readonly signature: string;
        readonly inputs: Array<ParamType>;
        readonly anonymous: boolean;
        readonly topic: string;
        encodeTopics(params: Array<any>): Array<string>;
        decode(data: string, topics?: Array<string>): any;
    }
    class _TransactionDescription extends Description implements TransactionDescription {
        readonly name: string;
        readonly args: Array<any>;
        readonly signature: string;
        readonly sighash: string;
        readonly decode: (data: string) => any;
        readonly value: BigNumber;
    }
    class _LogDescription extends Description implements LogDescription {
        readonly name: string;
        readonly signature: string;
        readonly topic: string;
        readonly decode: (data: string, topics: Array<string>) => any;
        readonly values: any;
    }
    export class Interface {
        readonly abi: Array<EventFragment | FunctionFragment>;
        readonly functions: {
            [name: string]: _FunctionDescription;
        };
        readonly events: {
            [name: string]: _EventDescription;
        };
        readonly deployFunction: _DeployDescription;
        constructor(abi: Array<string | FunctionFragment | EventFragment | ParamType> | string);
        parseTransaction(tx: {
            data: string;
            value?: BigNumberish;
        }): _TransactionDescription;
        parseLog(log: {
            topics: Array<string>;
            data: string;
        }): _LogDescription;
        static isInterface(value: any): value is Interface;
        static isIndexed(value: any): value is Indexed;
    }
    export {};
}

declare module 'js-sero-utils/utils/keccak256' {
    import { Arrayish } from 'js-sero-utils/utils/bytes';
    export function keccak256(data: Arrayish): string;
}

declare module 'js-sero-utils/utils/sha2' {
    import { Arrayish } from 'js-sero-utils/utils/bytes';
    export function ripemd160(data: Arrayish): string;
    export function sha256(data: Arrayish): string;
    export function sha512(data: Arrayish): string;
}

declare module 'js-sero-utils/utils/solidity' {
    export function pack(types: Array<string>, values: Array<any>): string;
    export function keccak256(types: Array<string>, values: Array<any>): string;
    export function sha256(types: Array<string>, values: Array<any>): string;
}

declare module 'js-sero-utils/utils/random-bytes' {
    export function randomBytes(length: number): Uint8Array;
}

declare module 'js-sero-utils/utils/properties' {
    export function defineReadOnly(object: any, name: string, value: any): void;
    export function setType(object: any, type: string): void;
    export function isType(object: any, type: string): boolean;
    export function resolveProperties(object: any): Promise<any>;
    export function checkProperties(object: any, properties: {
        [name: string]: boolean;
    }): void;
    export function shallowCopy(object: any): any;
    export function deepCopy(object: any, frozen?: boolean): any;
    export function inheritable(parent: any): (child: any) => void;
}

declare module 'js-sero-utils/utils/rlp' {
    import { Arrayish } from 'js-sero-utils/utils/bytes';
    export function encode(object: any): string;
    export function decode(data: Arrayish): any;
}

declare module 'js-sero-utils/utils/utf8' {
    import { Arrayish } from 'js-sero-utils/utils/bytes';
    export enum UnicodeNormalizationForm {
        current = "",
        NFC = "NFC",
        NFD = "NFD",
        NFKC = "NFKC",
        NFKD = "NFKD"
    }
    export function toUtf8Bytes(str: string, form?: UnicodeNormalizationForm): Uint8Array;
    export function toUtf8String(bytes: Arrayish, ignoreErrors?: boolean): string;
    export function formatBytes32String(text: string): string;
    export function parseBytes32String(bytes: Arrayish): string;
}

declare module 'js-sero-utils/utils/units' {
    import { BigNumber } from 'js-sero-utils/utils/bignumber';
    import { BigNumberish } from 'js-sero-utils/utils/bignumber';
    export function commify(value: string | number): string;
    export function formatUnits(value: BigNumberish, unitType?: string | number): string;
    export function parseUnits(value: string, unitType?: string | number): BigNumber;
}

